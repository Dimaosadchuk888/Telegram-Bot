require('dotenv').config();
const { Telegraf, session } = require('telegraf');
const express = require('express');
const handlers = require('./handlers');

// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ punycode
process.removeAllListeners('warning');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.log('üìù –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ —Ñ–∞–π–ª .env');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è healthcheck
const app = express();

// Healthcheck endpoint –¥–ª—è Railway
app.get('/', (req, res) => {
  res.json({
    status: 'ok',
    message: 'Telegram Bot is running',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Healthcheck endpoint –¥–ª—è Railway
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'telegram-bot',
    timestamp: new Date().toISOString()
  });
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/webhook', (req, res, next) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å:', {
    method: req.method,
    url: req.url,
    body: req.body,
    timestamp: new Date().toISOString()
  });
  next();
});

// Webhook endpoint –¥–ª—è Telegram
app.post('/webhook', bot.webhookCallback('/webhook'));
app.get('/webhook', (req, res) => {
  res.json({ status: 'webhook endpoint ready' });
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.start(handlers.handleStart);
bot.help(handlers.handleHelp);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
bot.action('balance', handlers.handleBalance);
bot.action('withdraw', handlers.handleWithdraw);
bot.action('deposit', handlers.handleDeposit);
bot.action('stats', handlers.handleStats);
bot.action('help', handlers.handleHelp);
bot.action('back_to_main', handlers.handleBackToMain);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
bot.action('confirm_withdraw', handlers.handleConfirmWithdraw);
bot.action('cancel_withdraw', handlers.handleCancelWithdraw);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
bot.action('payment_confirmed', handlers.handlePaymentConfirmed);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–æ–≤
bot.on('callback_query', async (ctx) => {
  await ctx.answerCbQuery('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  if (text === '/start') {
    await handlers.handleStart(ctx);
    return;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  const { mainMenu } = require('./keyboards');
  await ctx.reply('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', mainMenu);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const errorMessage = 'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
  
  if (ctx.callbackQuery) {
    ctx.answerCbQuery(errorMessage);
  } else {
    ctx.reply(errorMessage);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram Farming Bot...');
    console.log(`üîß NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
    console.log(`üîó WEBHOOK_URL: ${process.env.WEBHOOK_URL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    console.log(`üîë BOT_TOKEN: ${process.env.BOT_TOKEN ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
    
    const port = process.env.PORT || 3000;
    
    if (process.env.NODE_ENV === 'production') {
      // –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º —Å webhook
      console.log('üåê –ó–∞–ø—É—Å–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ —Å webhook');
      
      if (!process.env.WEBHOOK_URL) {
        console.error('‚ùå WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!');
        process.exit(1);
      }
      
      console.log(`üîó Webhook URL: ${process.env.WEBHOOK_URL}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
      app.listen(port, () => {
        console.log(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        console.log(`üè• Healthcheck –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${port}/health`);
      });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      try {
        await bot.telegram.setWebhook(process.env.WEBHOOK_URL);
        console.log('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook:', error.message);
        console.log('‚ÑπÔ∏è –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ webhook');
      }
      
    } else {
      // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å long polling
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (long polling)');
      
      if (!process.env.BOT_TOKEN || process.env.BOT_TOKEN === 'your_bot_token_here') {
        console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!');
        console.log('üìù –î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ —Ñ–∞–π–ª .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        process.exit(1);
      }
      
      await bot.launch();
    }
    
    console.log('‚úÖ Farming Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
    console.log('üí∞ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∞–º–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// Graceful stop
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
