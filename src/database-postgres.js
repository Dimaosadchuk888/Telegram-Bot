// –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è PostgreSQL (—á–∏—Å—Ç—ã–π –±–æ—Ç)

const { Pool } = require('pg');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
const isProduction = process.env.NODE_ENV === 'production';

// –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const connectionString = isProduction 
  ? process.env.DATABASE_URL 
  : process.env.DATABASE_PUBLIC_URL || process.env.DATABASE_URL;

console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', isProduction ? 'DATABASE_URL (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)' : 'DATABASE_PUBLIC_URL (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)');

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool({
  connectionString,
  ssl: isProduction ? { rejectUnauthorized: false } : false,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –±–æ—Ç–∞
const PostgresDB = {
  // –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  testConnection: async () => {
    try {
      const client = await pool.connect();
      const result = await client.query('SELECT NOW()');
      client.release();
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error.message);
      return false;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUser: async (userId) => {
    try {
      const result = await pool.query('SELECT * FROM users WHERE user_id = $1', [userId]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  createOrUpdateUser: async (userId, username, firstName, lastName) => {
    try {
      const result = await pool.query(`
        INSERT INTO users (user_id, username, first_name, last_name, created_at, updated_at)
        VALUES ($1, $2, $3, $4, NOW(), NOW())
        ON CONFLICT (user_id) 
        DO UPDATE SET 
          username = EXCLUDED.username,
          first_name = EXCLUDED.first_name,
          last_name = EXCLUDED.last_name,
          updated_at = NOW()
        RETURNING *
      `, [userId, username, firstName, lastName]);
      
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats: async () => {
    try {
      const result = await pool.query(`
        SELECT 
          COUNT(*) as total_users,
          COALESCE(SUM(balance_uni), 0) as total_balance,
          COALESCE(SUM(hold_balance), 0) as total_hold_balance,
          COALESCE(SUM(withdrawn_total), 0) as total_withdrawn
        FROM users
      `);
      
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        total_users: 0,
        total_balance: 0,
        total_hold_balance: 0,
        total_withdrawn: 0
      };
    }
  },

  // –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  close: async () => {
    await pool.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç—ã');
  }
};

module.exports = PostgresDB;
