// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ Railway
require('dotenv').config();
const { Pool } = require('pg');

async function checkRailwayDatabase() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Railway...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('NODE_ENV:', process.env.NODE_ENV || 'development');
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
  console.log('DATABASE_PUBLIC_URL:', process.env.DATABASE_PUBLIC_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');

  if (!process.env.DATABASE_URL && !process.env.DATABASE_PUBLIC_URL) {
    console.error('‚ùå –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –∏–ª–∏ DATABASE_PUBLIC_URL –≤ Railway Variables');
    return;
  }

  const getDatabaseConfig = () => {
    const isProduction = process.env.NODE_ENV === 'production';
    const connectionString = isProduction 
      ? process.env.DATABASE_URL 
      : process.env.DATABASE_PUBLIC_URL || process.env.DATABASE_URL;

    console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', isProduction ? 'DATABASE_URL (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)' : 'DATABASE_PUBLIC_URL (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)');

    return {
      connectionString,
      ssl: isProduction ? { rejectUnauthorized: false } : false,
    };
  };

  const pool = new Pool(getDatabaseConfig());

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    console.log('\n1. üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    const connectionTest = await pool.query('SELECT NOW() as current_time, version() as pg_version');
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', connectionTest.rows[0].current_time);
    console.log('üìä PostgreSQL –≤–µ—Ä—Å–∏—è:', connectionTest.rows[0].pg_version.split(' ')[1]);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n2. üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');
    const tablesResult = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `);

    console.log('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
    if (tablesResult.rows.length === 0) {
      console.log('   - –¢–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      tablesResult.rows.forEach(row => {
        console.log(`   - ${row.table_name}`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
    console.log('\n3. üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users...');
    const usersTableExists = tablesResult.rows.some(row => row.table_name === 'users');
    
    if (usersTableExists) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const usersStructure = await pool.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = 'users' 
        ORDER BY ordinal_position;
      `);

      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
      usersStructure.rows.forEach(row => {
        console.log(`   - ${row.column_name}: ${row.data_type} ${row.is_nullable === 'NO' ? 'NOT NULL' : ''} ${row.column_default ? `DEFAULT ${row.column_default}` : ''}`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const usersCount = await pool.query('SELECT COUNT(*) as count FROM users');
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ users: ${usersCount.rows[0].count}`);

      if (parseInt(usersCount.rows[0].count) > 0) {
        const sampleUsers = await pool.query('SELECT telegram_id, username, balance_uni FROM users LIMIT 3');
        console.log('üìä –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
        sampleUsers.rows.forEach((user, index) => {
          console.log(`   ${index + 1}. ID: ${user.telegram_id}, Username: ${user.username || 'N/A'}, Balance: ${user.balance_uni}`);
        });
      }
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üî® –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users...');
      
      const createUsersTableSQL = `
        CREATE TABLE users (
          id SERIAL PRIMARY KEY,
          telegram_id BIGINT UNIQUE NOT NULL,
          username TEXT,
          first_name TEXT,
          last_name TEXT,
          balance_uni NUMERIC(20, 6) DEFAULT 0,
          hold_balance NUMERIC(20, 6) DEFAULT 0,
          withdrawn_total NUMERIC(20, 6) DEFAULT 0,
          last_active TIMESTAMP DEFAULT NOW(),
          created_at TIMESTAMP DEFAULT NOW()
        );
      `;

      await pool.query(createUsersTableSQL);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É transactions
    console.log('\n4. üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã transactions...');
    const transactionsTableExists = tablesResult.rows.some(row => row.table_name === 'transactions');
    
    if (transactionsTableExists) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      const transactionsCount = await pool.query('SELECT COUNT(*) as count FROM transactions');
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ transactions: ${transactionsCount.rows[0].count}`);
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üî® –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É transactions...');
      
      const createTransactionsTableSQL = `
        CREATE TABLE transactions (
          id SERIAL PRIMARY KEY,
          user_id BIGINT NOT NULL,
          type VARCHAR(50) NOT NULL,
          amount DECIMAL(20, 8) NOT NULL,
          fee DECIMAL(20, 8) DEFAULT 0,
          status VARCHAR(50) DEFAULT 'pending',
          created_at TIMESTAMP DEFAULT NOW(),
          FOREIGN KEY (user_id) REFERENCES users(telegram_id)
        );
      `;

      await pool.query(createTransactionsTableSQL);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —Å–æ–∑–¥–∞–Ω–∞');
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\n5. üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const finalTablesResult = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name;
    `);

    console.log('üìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    finalTablesResult.rows.forEach(row => {
      console.log(`   - ${row.table_name}`);
    });

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.log('\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏:');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  } finally {
    await pool.end();
    console.log('\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkRailwayDatabase();



